import re
import time
import psutil
from collections import Counter
from concurrent.futures import ProcessPoolExecutor
from tqdm import tqdm  # –î–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
data_path = "large_text_data.txt"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞
def process_chunk(chunk):
    words = re.findall(r'\w+', chunk.lower())
    return Counter(words)

if __name__ == '__main__':
    # –ó–∞–º–µ—Ä —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    start_time = time.time()
    start_cpu = psutil.cpu_percent()
    start_mem = psutil.virtual_memory().percent

    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–ª–æ–∫–∞–º (streaming) –∏ —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    word_counts = Counter()

    # –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—á—Ç–æ–±—ã –Ω–µ —á–∏—Ç–∞—Ç—å –≤–µ—Å—å —Ñ–∞–π–ª —Å—Ä–∞–∑—É)
    chunk_size = 1024 * 1024  # 1 MB –±–ª–æ–∫–∏

    # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    total_size = 0
    with open(data_path, "r", encoding="utf-8") as file:
        file.seek(0, 2)  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
        total_size = file.tell()

    with open(data_path, "r", encoding="utf-8") as file:
        with ProcessPoolExecutor() as executor:
            # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–∞
            with tqdm(total=total_size, unit='B', unit_scale=True, desc="Processing File") as pbar:
                while True:
                    chunk = file.read(chunk_size)
                    if not chunk:
                        break
                    word_counts.update(process_chunk(chunk))
                    pbar.update(len(chunk))

    # –ó–∞–º–µ—Ä —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    end_time = time.time()
    end_cpu = psutil.cpu_percent()
    end_mem = psutil.virtual_memory().percent

    # –í—ã–≤–æ–¥ —Ç–æ–ø-20 —Å–ª–æ–≤
    print("\nüìä Top 20 Words:")
    for word, count in word_counts.most_common(20):
        print(f"{word}: {count}")

    # –í—ã–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    print("\nüöÄ Execution Time (Python): {:.4f} seconds".format(end_time - start_time))
    print(f"üî• CPU Usage (Python): {end_cpu}%")
    print(f"üíæ RAM Usage (Python): {end_mem}%")
    print(f"üß† Total CPU Cores Used: {psutil.cpu_count(logical=True)}")
